#!/bin/sh

# mandate virtual partitions
grep -q "mtd[56]" /proc/mtd || die "Please run 'fw_setenv enable_updates true' then reboot the camera. Re-run upgrade after reboot."

KERNEL_MAGIC="27051956"
U_BOOT_MAGIC="06050403"
ROOTFS_MAGIC="68737173"
GH="https://github.com/"
PAD="\t\t\t    "

workdir="/tmp/sysupgrade"
stage2app="sysupgrade-stage2"
[ -d $workdir ] || mkdir -p $workdir
fw_file="$workdir/fw.bin"

self=$(realpath $0)
bbapplets="echo flash_eraseall flashcp reboot sh sleep"
upgrade=""

# work in $workdir
cd $workdir

bye() {
	die "\n\n\tMaybe next time..."
}

check_network() {
	curl -m 5 -I $1 >/dev/null 2>&1 && return
	echo_c 160 "No internet?\n"
	ip a
	exit 1
}

check_free_space() {
	local dl_size=$(curl -sIL $1 | awk '/Content-Length/{fs=$2}END{print fs}')
	local free_space=$(df -m /tmp | tail -1 | awk '{print $4}')
	free_space=$((free_space * 1024 * 1024))
	[ "$dl_size" -gt "$free_space" ] && die "Not enough free space to download firmware: $dl_size > $free_space"
}

cleanup() {
	say "Clean up temporary files."
	rm -rf $workdir
	exit 0
}

clone_app() {
	local target="$2"
	[ -z "$target" ] && target="$(basename $1)"
	if ! cp -vf "$1" "$workdir/$target"; then
		say "Error: Failed to copy $1 to $workdir/$target"
		cleanup
	fi
	chmod +x $workdir/$target
}

die() {
	say "$1"
	exit 1
}

download() {
	curl -fL# -o $fw_file $1 || die "Download failed!"
}

expand_bb() {
	echo "set up $1"
	ln -s $workdir/busybox $workdir/$1
}

handle_payload() {
	if [ "local" = "$upgrade" ]; then
		say "Upgrading from a provided file"
		if echo "$1" | grep -qE '^https?://'; then
			say "Download firmware from\n$1"
			check_free_space $1
			download $1
		else
			mv $1 $fw_file
		fi
	else
		say "Upgrading from GitHub"
		data=/etc/os-release
		profile=$(awk -F= '/^IMAGE_ID=/ {print $2}' $data)
		[ -z "$profile" ] && die "Building profile is not set in $data"

		gh_url="$GH/themactep/thingino-firmware/releases/download"
		bin_url="$gh_url/firmware"
		sha_url="$gh_url/verify/"

		if [ "part" = "$upgrade" ]; then
			bin_url="${bin_url}_update/thingino-${profile}-update.bin"
			sha_url="${sha_url}thingino-${profile}-update.bin.sha256sum"
		else
			bin_url="${bin_url}/thingino-${profile}.bin"
			sha_url="${sha_url}thingino-${profile}.bin.sha256sum"
		fi
		bin_file=$(basename $bin_url)
		sha_file=$(basename $sha_url)

		check_free_space $bin_url

		say "Download firmware\n$bin_url"
		echo "curl -LO# $bin_url"
		curl -LO# $bin_url || die "Failed to download firmware!"

		say "Download checksum file\n$sha_url"
		curl -LO# $sha_url || die "Failed to download checksum file!"

		sha256sum -c $sha_file || die "Checksum does not match!"

		rm $sha_file
		mv $bin_file $fw_file
	fi
}

flush_memory() {
	say "Sync changes"
	sync
	say "Drop caches"
	echo 3 > /proc/sys/vm/drop_caches
}

remove_snapshot() {
	say "Remove snapshot"
	rm -f /tmp/snapshot.jpg
}

say() {
	echo -e "$1"
}

show_help() {
	die "Usage: $0 [ -f | -p | <filename> | <URL> ]
Where:
  -f          full upgrade with a binary from GitHub
  -p          partial upgrade with a binary from GitHub
  <filename>  full or partial upgrade from a local file
  <URL>       full or partial upgrade from a URL
  -h          this help"
}

stop_services() {
	say "Stop services"
	for i in $(find /etc/init.d/ -name "[KS]*" -executable | sort -nr); do
		case "$(basename $i)" in
			K99watchdog | S36wireless | S38wpa_supplicant | S40network | S50dropbear)
				continue
				;;
			*)
				sh -c "$i stop"
				;;
		esac
	done
}

while getopts "fhp" flag; do
	case "$flag" in
		f)
			say "Full upgrade from GitHub"
			upgrade="full"
			url="$GH"
			;;
		p)
			say "Partial upgrade from GitHub"
			upgrade="part"
			url="$GH"
			;;
		h | *)
			show_help
			;;
	esac
done

if [ -z "$upgrade" ]; then
	[ -z "$1" ] && show_help

	upgrade="local"
	if echo "$1" | grep -qE '^https?://'; then
		echo "Upgrade from a remote file"
		url="$1"
	else
		echo "Upgrade from a local file"
		[ -r "$1" ] || die "Cannot find file $1"
	fi
fi

if [ "full" = "$upgrade" ]; then
	clear
	echo_c 160 "
$PAD ____ _____ ___  ____
$PAD/ ___|_   _/ _ \|  _ \\
$PAD\___ \ | || | | | |_) |
$PAD ___) || || |_| |  __/
$PAD|____/ |_| \___/|_|
"
	say "\tYou have requested to perform a full firmware upgrade,"
	say "\twhich is a risky operation replacing the existing bootloader.\n"
	say "\tIn the event of an error, the camera will become inoperable,"
	say "\tand you will need to perform a recovery restore the system.\n"
	echo_c 160 "\tYou have ten seconds to cancel the upgrade by pressing Ctrl-C."
	echo -en "\n\n\t    "

	trap bye 2 15
	i=10
	while :; do
		[ "$i" -lt 0 ] && break
		echo -n "$i"
		[ "$i" -gt 0 ] && echo -n " .. "
		i=$((i-1))
		sleep 1
	done
	clear
fi

trap cleanup 2 6 15

[ -n "$url" ] && check_network "$url"

handle_payload "$@"

case "$(xxd -l 4 -p $fw_file)" in
	"$U_BOOT_MAGIC") [ "$(stat -c%s $fw_file)" -le 262144 ] && mtd_dev="mtd0" || mtd_dev="mtd6" ;;
	"$KERNEL_MAGIC") mtd_dev="mtd5" ;;
	"$ROOTFS_MAGIC") die "We cannot flash only rootfs" ;;
	*) die "Unknown file" ;;
esac

stop_services
remove_snapshot
flush_memory

clone_app /bin/busybox
clone_app /sbin/$stage2app
for a in $bbapplets; do expand_bb $a; done

echo_c 208 "Switching to Stage 2.\n"
if ! exec $workdir/busybox sh $workdir/$stage2app "$fw_file" "$mtd_dev"; then
	say "Error: Failed to execute $workdir/$stage2app"
	cleanup
fi

# If succeeded, do not clean up
trap - INT TERM

exit 0
