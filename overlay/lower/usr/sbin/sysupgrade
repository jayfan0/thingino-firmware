#!/bin/sh

. /etc/init.d/rc.common

KERNEL_MAGIC="27051956"
U_BOOT_MAGIC="06050403"
ROOTFS_MAGIC="68737173"
BB_BINARY=/tmp/busybox

if [ -z "$RUNNING_WITH_TMP_BUSYBOX" ]; then
    if [ ! -f /tmp/busybox ]; then
        cp /bin/busybox /tmp/busybox
        cp /sbin/sysupgrade /tmp/sysupgrade
		cp /sbin/fw_printenv /tmp/fw_printenv
		ln -s /tmp/fw_printenv /tmp/fw_setenv
    fi

    RUNNING_WITH_TMP_BUSYBOX=1 exec /tmp/busybox sh /tmp/sysupgrade "$@"
fi

show_help() {
	echo "Usage: $0 <filename> | [-f | -p] | <URL>
Where:
  -f          full upgrade with a binary from GitHub
  -p          partial upgrade with a binary from GitHub
  <filename>  full or partial upgrade from a local file
  <URL>       full or partial upgrade from a URL
  -h          this help
"
}

stop_service() {
	if [ ! -f "/etc/init.d/$1" ]; then
		info "Not found"
		return
	fi
	/etc/init.d/$1 stop
}

verify_checksum() {
	checksum_url="$1"
	firmware_file="$2"

	checksum_file=$(mktemp)
	info "Downloading SHA-256 checksum from $checksum_url"
	curl -# -L -f -o $checksum_file $checksum_url || die "Failed to download checksum from $checksum_url"

	# Extract the expected checksum (first field) from the downloaded file
	expected_checksum=$(awk '{print $1}' $checksum_file)
	actual_checksum=$($BB_BINARY sha256sum $firmware_file | awk '{print $1}')

	if [ "$expected_checksum" = "$actual_checksum" ]; then
		info "SHA-256 checksum verification succeeded."
	else
		die "SHA-256 checksum verification failed! Firmware file might be corrupted."
	fi
}

cleanup() {
	[ -n "$binary_file" ] && [ -f "$binary_file" ] && rm -f "$binary_file"
	[ -n "$checksum_file" ] && [ -f "$checksum_file" ] && rm -f "$checksum_file"
	rm -f /tmp/busybox /tmp/fw_setenv /tmp/fw_printenv /tmp/sysupgrade
	info "Cleaned up temporary files."
}

# Trap signals to ensure cleanup on exit
trap cleanup EXIT INT TERM

while getopts "fhp" flag; do
	case "$flag" in
		f)
			upgrade="full"
			;;
		p)
			upgrade="part"
			;;
		h|*)
			show_help
			exit 1
			;;
	esac
done
[ -z "$upgrade" ] && upgrade="local"

shift $((OPTIND-1))

if [ "local" = "$upgrade" ]; then
	[ -z "$1" ] && { show_help; exit 1; }

	if echo "$1" | grep -qE '^https?://'; then
		binary_file=$(mktemp)
		info "Downloading firmware from $1"
		curl -# -L -f -o $binary_file $1 || die "Failed to download firmware from $1"
	else
		binary_file="$1"
	fi
else
	data=/etc/os-release
	profile=$(awk -F '=' '/^IMAGE_ID=/ {print $2}' $data)
	[ -z "$profile" ] && die "Building profile is not set in $data"
	binary_file=$(mktemp -u) # Create a name of temporary file
fi

info "Stop services"
stop_service S01syslogd
stop_service S15thingino-button
stop_service S49ntpd
stop_service S50httpd
stop_service S50crond
stop_service S50mdnsd
stop_service S50mosquitto
stop_service S93telegrambot
stop_service S95prudynt
stop_service S96iad
stop_service S96onvif

info "Remove snapshot"
run "rm -f /tmp/snapshot.jpg"

info "Drop caches"
run "echo 3 > /proc/sys/vm/drop_caches"

info "Sync changes"
run "sync"

case "$upgrade" in
	full | part)
		url="https://github.com/themactep/thingino-firmware/releases/download/firmware"
		checksum_url="https://github.com/themactep/thingino-firmware/releases/download/verify"

		if [ "part" = "$upgrade" ]; then
			fw_file="_update/thingino-${profile}-update.bin"
			sha256_file="thingino-${profile}-update.bin.sha256sum"
		else
			fw_file="/thingino-${profile}.bin"
			sha256_file="thingino-${profile}.bin.sha256sum"
		fi

		info "Downloading firmware from ${url}${fw_file}."
		curl -# -L -f -o $binary_file ${url}${fw_file} || die "Failed to download firmware from $url"

		# Perform checksum verification
		verify_checksum "${checksum_url}/${sha256_file}" "$binary_file"
		;;
	local) ;;
esac

[ -f "$binary_file" ] || die "File $1 not found"

magic=$(xxd -l 4 -p $binary_file)
case "$magic" in
	$U_BOOT_MAGIC)
		fsize=$(stat -c%s $binary_file)
		if [ "$fsize" -le $((256 * 1024)) ]; then
			mtd_dev="mtd0"
		else
			mtd_dev="mtd6"
		fi
		;;
	$KERNEL_MAGIC)
		mtd_dev="mtd5"
		;;
	$ROOTFS_MAGIC)
		die "We cannot flash only rootfs"
		;;
	*)
		die "Unknown file"
		;;
esac

grep -q -e "mtd6" -e "mtd5" /proc/mtd || die "Please run 'fw_setenv enable_updates true' then reboot the camera. Re-run upgrade after reboot."

info "Unmount overlay"
run "umount /overlay"

info "Unmount rootfs"
run "umount /"

echo

info "Performing upgrade"
warn "Do not turn off the power!"
if $BB_BINARY flashcp -v $binary_file /dev/$mtd_dev; then
	if [ "mtd5" = "$mtd_dev" ]; then
		/tmp/fw_setenv sysupgrade_complete false
	fi

	echo "Rebooting..."
	echo wdt > /proc/jz/reset/reset
else
	echo "Upgrade failed!"
	die "Caution: You may need to perform a recovery flash restore before rebooting the camera!"
fi

exit 0
