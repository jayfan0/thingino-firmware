#!/bin/sh

show_help() {
	echo "Usage: $0 [-l]"
	echo
	echo "Thingino Diagnostics Script"
	echo
	echo "This script generates diagnostic logs to help developers troubleshoot issues with Thingino devices."
	echo "The logs may contain sensitive or personal information, so please review them before sharing."
	echo
	echo "Options:"
	echo "  -l    Save the diagnostics output to a local file instead of sharing it via termbin."
	echo
	echo "Without the -l option, the script will generate a link using termbin to share the diagnostics log."
	exit 0
}

header() {
	local border="=============================================="
	local width=46
	local text="$1"
	local text_length=${#text}
	local padding=$(((width - text_length - 2) / 2))
	local left_border=${border:0:padding}
	local right_border=${border:0:(width - padding - text_length - 2)}
	echo -e "$border\n$left_border $text $right_border\n$border"
}

infocat() {
	[ -f "$1" ] || return
	[ -n "$2" ] && header "$2"
	cat $1
}

inforun() {
	[ -n "$2" ] && header "$2"
	eval $1
}

local_file=""
while getopts ":lh" opt; do
	case $opt in
		l)
			local_file="yes"
			;;
		h)
			show_help
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			show_help
			;;
	esac
done

echo "thingino diagnostics"
echo "This script requires network access."
echo "It is designed to generate log information to share with developers for diagnostic issues."
echo "It may contain sensitive or personal information, so make sure to review the log before sharing the link!"
echo "We use termbin to share the log. Please review their acceptable use policy at https://www.termbin.com/"
echo
read -p "Do you wish to proceed? (yes/no): " response
if [ "yes" != "$response" ]; then
	echo "Operation aborted by the user."
	exit 1
fi

if [ -n "$local_file" ]; then
	output_file="/tmp/thingino-diag-$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 4).log"
else
	output_file=$(mktemp)
fi

{
	inforun "date"
	inforun "uptime"
	inforun "uname -a"
	inforun "grep -a \"Ingenic U-Boot Flex\" /dev/mtd0"
	infocat "/etc/os-release" "THINGINO"
	inforun "soc -w" "SOC"
	inforun "dmesg" "DMESG"
	inforun "logread" "SYSLOG"
	inforun "logcat" "LOGCAT"
	inforun "ps" "PS"
	inforun "df -h" "DF"
	inforun "ipcs" "IPC"
	inforun "lsmod" "KMOD"

	header "KMOD-2"
	for file in /etc/modules.d/*; do echo "== $file =="; cat "$file"; done

	inforun "lsusb" "USB"
	inforun "free -h" "MEMORY"
	inforun "lsof" "LSOF"
	inforun "mount" "MOUNT"
	inforun "gpio list" "GPIO"

	header "ENV"
	fw_printenv | awk -F'=' '{if (/ethaddr|gatewayip|ipaddr|root_pw_hash|serverip|ssh_authorized_keys|sshkey|wlanmac|wlanpass/) print $1 "=REDACTED"; else print}' | sort

	infocat "/proc/cmdline" "CMDLINE"
	infocat "/proc/jz/clock/clocks" "CLOCKS"
	infocat "/proc/jz/isp/isp-fs" "isp-fs"
	infocat "/proc/jz/isp/isp-m0" "isp-m0"
	infocat "/proc/jz/isp/isp_info" "isp_info"
	infocat "/tmp/continuous_mem_info" "libimp meminfo"

	inforun "sensor -a" "sensor"

	header "streamer"
	awk -F':' '{if (/password/) print $1 " REDACTED"; else print}' /etc/prudynt.cfg

	infocat "/etc/crontabs/root" "crontab"
} > "$output_file"

if [ -z "$local_file" ]; then
	url=$(cat "$output_file" | send2termbin)
	rm -f "$output_file"

	echo
	if [ -z "$url" ]; then
		echo "There was an error."
		exit 1
	fi

	echo "Your diagnostics log link:"
	echo "$url"
else
	echo "Diagnostics log saved locally at: $output_file"
fi

exit 0
