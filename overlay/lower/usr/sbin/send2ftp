#!/bin/sh

plugin="ftp"

. /sbin/common-plugins

show_help() {
	echo "Usage: $0 [-s host] [-p port] [-u username] [-P password] [-d path] [-f file] [-v] [-h]
  -s host     FTP server FQDN or IP address.
  -p port     FTP server port.
  -d path     Directory on server, relative to FTP root.
  -f file     File to upload.
  -u username FTP username.
  -P password FTP password.
  -v          Verbose output.
  -h          Show this help.
"
	quit_clean 0
}

# override config values with command line arguments
while getopts d:f:p:P:s:u:vh flag; do
	case "$flag" in
		d) ftp_path=$OPTARG ;;
		f) ftp_file=$OPTARG ;;
		p) ftp_port=$OPTARG ;;
		P) ftp_password=$OPTARG ;;
		s) ftp_host=$OPTARG ;;
		u) ftp_user=$OPTARG ;;
		v) verbose="true" ;;
		h | *) show_help ;;
	esac
done

[ "false" = "$ftp_enabled" ] && die "Sending to FTP is disabled."
# validate mandatory values
[ -z "$ftp_host" ] && die "FTP host not found"

# assign default values if not set
[ -z "$ftp_port" ] && ftp_port=21
[ -z "$ftp_user" ] && ftp_user="anonymous" && ftp_password="anonymous"

if [ -z "$ftp_file" ]; then
	snapshot=/tmp/snapshot.jpg
	[ -f "$snapshot" ] || die "Cannot find a snapshot"

	attachment=$(mktemp -u /tmp/snapshot-XXXXXX).jpg
	delete_tempfile="true"
	cp $snapshot $attachment

	ftp_file=$attachment
fi

url="ftp://"
[ -n "$ftp_user" ] && [ -n "$ftp_password" ] && url="$url$ftp_user:$ftp_password"
url="$url@$ftp_host:$ftp_port"
[ -n "$ftp_path" ] && url="$url/${ftp_path// /%20}"
url="$url/$(date +"$ftp_template")"

build_cmd "$CURL"
[ "true" = "$ftp_socks5_enabled" ] && use_socks5
build_cmd "--url $url"
build_cmd "--upload-file $ftp_file"
build_cmd "--ftp-create-dirs"

log_and_run "$command"

[ "true" = "$delete_tempfile" ] && [ -f "$attachment" ] && rm "$attachment"
[ "true" = "$verbose" ] && cat "$LOG_FILE"

quit_clean 0
